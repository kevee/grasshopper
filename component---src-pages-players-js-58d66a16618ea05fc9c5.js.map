{"version":3,"sources":["webpack:///./src/utilities/player-games.js","webpack:///./src/components/layout/index.js","webpack:///./src/components/common/container.js","webpack:///./src/components/common/player-list.js","webpack:///./src/pages/players.js"],"names":["player","games","lifetimeScore","lifetimeGames","Scores","forEach","score","data","Game","Score","Number_of_hops","recordId","Hops","hop","title","children","Container","styled","div","bp","maxWidth","margin","TextContainer","allPlayers","players","map","stats","getPlayerGames","sort","a","b","to","Player_slug","Player_Name","Math","round","allAirtable","nodes"],"mappings":"6FAAe,aAAAA,GACb,IAAMC,EAAQ,GACVC,EAAgB,EAChBC,EAAgB,EA+BpB,OA9BIH,EAAOI,QACTJ,EAAOI,OAAOC,SAAQ,SAAAC,GAChBA,EAAMC,KAAKC,OACbN,GAAiBI,EAAMC,KAAKE,MAC5BN,GAAiBG,EAAMC,KAAKC,KAAK,GAAGD,KAAKG,eAAiB,EAC1DT,EAAMK,EAAMC,KAAKC,KAAK,GAAGG,UAAzB,eACEA,SAAUL,EAAMC,KAAKC,KAAK,GAAGG,UAC1BL,EAAMC,KAAKC,KAAK,GAAGD,KAFxB,CAGED,MAAOA,EAAMC,KAAKE,YAKtBT,EAAOY,MACTZ,EAAOY,KAAKP,SAAQ,SAAAQ,GACdA,EAAIN,KAAKC,OACXN,GAAiBW,EAAIN,KAAKE,MAC1BN,GAAiBU,EAAIN,KAAKC,KAAK,GAAGD,KAAKG,eAAiB,OACR,IAArCT,EAAMY,EAAIN,KAAKC,KAAK,GAAGG,UAChCV,EAAMY,EAAIN,KAAKC,KAAK,GAAGG,UAAvB,eACEA,SAAUE,EAAIN,KAAKC,KAAK,GAAGG,UACxBE,EAAIN,KAAKC,KAAK,GAAGD,KAFtB,CAGED,MAAOO,EAAIN,KAAKE,QAGlBR,EAAMY,EAAIN,KAAKC,KAAK,GAAGG,UAAUL,OAASO,EAAIN,KAAKE,UAKpD,CAAER,QAAOC,gBAAeC,mB,oCClCjC,mFAOe,oBAAGW,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKD,MAAOA,IACZ,kBAAC,IAAD,CAAQA,MAAOA,IACf,8BACE,kBAAC,IAAD,MACCC,M,kJCXDC,EAAYC,UAAOC,IAAV,kCACXC,YAAG,CACHC,SAAU,CAAC,OAAQ,OAAQ,UAC3BC,OAAQ,CAAC,SAAU,SAAU,aAI3BC,EAAgBL,UAAOC,IAAV,kCACfC,YAAG,CACHC,SAAU,CAAC,OAAQ,OAAQ,QAC3BC,OAAQ,CAAC,SAAU,SAAU,c,oHCTlB,cAAkB,IACzBE,EADwB,EAAdC,QACWC,KAAI,gBAAGlB,EAAH,EAAGA,KAAH,wBAC1BA,EAD0B,CAE7BmB,MAAOC,YAAepB,QAGxB,OACE,+BACE,+BACE,sCACA,qCACA,8CACA,4CAEF,+BACGgB,EACEK,MAAK,SAACC,EAAGC,GAAJ,OACJD,EAAEH,MAAMxB,cAAgB4B,EAAEJ,MAAMxB,cAAgB,GAAK,KAEtDuB,KAAI,SAAAzB,GAAM,OACT,4BACE,4BACE,kBAAC,OAAD,CAAM+B,GAAE,WAAa/B,EAAOgC,aACzBhC,EAAOiC,cAGZ,4BAAKC,KAAKC,MAAmC,IAA7BnC,EAAO0B,MAAMvB,eAAuB,KACpD,4BAAKH,EAAO0B,MAAMxB,eAClB,4BACGgC,KAAKC,MACHnC,EAAO0B,MAAMxB,cAAgBF,EAAO0B,MAAMvB,cACzC,KACA,IAAM,YC9BX,0BAAGI,EAAH,EAAGA,KAAH,OACb,kBAAC,IAAD,CAAQO,MAAM,WACZ,kBAAC,IAAD,KACE,wCACA,kBAAC,EAAD,CAAYU,QAASjB,EAAK6B,YAAYC","file":"component---src-pages-players-js-58d66a16618ea05fc9c5.js","sourcesContent":["export default player => {\n  const games = {}\n  let lifetimeScore = 0\n  let lifetimeGames = 0\n  if (player.Scores) {\n    player.Scores.forEach(score => {\n      if (score.data.Game) {\n        lifetimeScore += score.data.Score\n        lifetimeGames += score.data.Game[0].data.Number_of_hops / 3\n        games[score.data.Game[0].recordId] = {\n          recordId: score.data.Game[0].recordId,\n          ...score.data.Game[0].data,\n          score: score.data.Score,\n        }\n      }\n    })\n  }\n  if (player.Hops) {\n    player.Hops.forEach(hop => {\n      if (hop.data.Game) {\n        lifetimeScore += hop.data.Score\n        lifetimeGames += hop.data.Game[0].data.Number_of_hops / 3\n        if (typeof games[hop.data.Game[0].recordId] === 'undefined') {\n          games[hop.data.Game[0].recordId] = {\n            recordId: hop.data.Game[0].recordId,\n            ...hop.data.Game[0].data,\n            score: hop.data.Score,\n          }\n        } else {\n          games[hop.data.Game[0].recordId].score += hop.data.Score\n        }\n      }\n    })\n  }\n  return { games, lifetimeScore, lifetimeGames }\n}\n","import React from 'react'\nimport SEO from './seo'\nimport { SkipNavLink, SkipNavContent } from '@reach/skip-nav'\nimport '@reach/skip-nav/styles.css'\nimport Header from './header'\nimport '../../style/global.css'\n\nexport default ({ title, children }) => (\n  <>\n    <SkipNavLink />\n    <SEO title={title} />\n    <Header title={title} />\n    <main>\n      <SkipNavContent />\n      {children}\n    </main>\n  </>\n)\n","import bp from '../../style/breakpoints'\nimport styled from '@emotion/styled'\n\nconst Container = styled.div`\n  ${bp({\n    maxWidth: ['100%', '100%', '1100px'],\n    margin: ['0 1rem', '0 1rem', '0 auto'],\n  })}\n`\n\nconst TextContainer = styled.div`\n  ${bp({\n    maxWidth: ['100%', '100%', '60ch'],\n    margin: ['0 1rem', '0 1rem', '0 auto'],\n  })}\n`\n\nexport { Container, TextContainer }\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport getPlayerGames from '../../utilities/player-games'\n\nexport default ({ players }) => {\n  const allPlayers = players.map(({ data }) => ({\n    ...data,\n    stats: getPlayerGames(data),\n  }))\n\n  return (\n    <table>\n      <thead>\n        <th>Player</th>\n        <th>Games</th>\n        <th>Lifetime score</th>\n        <th>Magic index</th>\n      </thead>\n      <tbody>\n        {allPlayers\n          .sort((a, b) =>\n            a.stats.lifetimeScore > b.stats.lifetimeScore ? 1 : -1\n          )\n          .map(player => (\n            <tr>\n              <td>\n                <Link to={`/player/${player.Player_slug}`}>\n                  {player.Player_Name}\n                </Link>\n              </td>\n              <td>{Math.round(player.stats.lifetimeGames * 100) / 100}</td>\n              <td>{player.stats.lifetimeScore}</td>\n              <td>\n                {Math.round(\n                  (player.stats.lifetimeScore / player.stats.lifetimeGames) *\n                    1000\n                ) / 1000}{' '}\n              </td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  )\n}\n","import React from 'react'\nimport { Container } from '../components/common/container'\nimport Layout from '../components/layout'\nimport PlayerList from '../components/common/player-list'\nimport { graphql } from 'gatsby'\n\nexport default ({ data }) => (\n  <Layout title=\"Players\">\n    <Container>\n      <h1>Players!</h1>\n      <PlayerList players={data.allAirtable.nodes} />\n    </Container>\n  </Layout>\n)\n\nexport const query = graphql`\n  {\n    allAirtable(filter: { table: { eq: \"Players\" } }) {\n      nodes {\n        data {\n          Player_Name\n          Player_slug\n          League {\n            data {\n              Name\n            }\n          }\n          Nickname\n          Scores {\n            data {\n              Score\n              Game {\n                recordId\n                data {\n                  Date\n                  Number_of_hops\n                  Game_League {\n                    data {\n                      Name\n                      League_slug\n                    }\n                  }\n                }\n              }\n            }\n          }\n          Hops {\n            data {\n              Score\n              Game {\n                recordId\n                data {\n                  Date\n                  Number_of_hops\n                  Game_League {\n                    data {\n                      Name\n                      League_slug\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}